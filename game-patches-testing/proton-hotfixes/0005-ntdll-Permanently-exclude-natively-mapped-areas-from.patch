From df166f9e55d0eb325e32e70bf819e10942d7cd75 Mon Sep 17 00:00:00 2001
From: Paul Gofman <gofmanp@gmail.com>
Date: Wed, 15 Jan 2020 17:05:09 +0300
Subject: [PATCH 5/5] ntdll: Permanently exclude natively mapped areas from
 free areas list.

Signed-off-by: Paul Gofman <gofmanp@gmail.com>
---
 dlls/ntdll/virtual.c | 28 ++++++++++++++++++++++------
 1 file changed, 22 insertions(+), 6 deletions(-)

diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
index b7d8a88abb..3068fe7e47 100644
--- a/dlls/ntdll/virtual.c
+++ b/dlls/ntdll/virtual.c
@@ -111,6 +111,9 @@ static const BYTE VIRTUAL_Win32Flags[16] =
 
 static struct wine_rb_tree views_tree;
 
+static void *last_already_mapped;
+static size_t last_already_mapped_size;
+
 static RTL_CRITICAL_SECTION csVirtual;
 static RTL_CRITICAL_SECTION_DEBUG critsect_debug =
 {
@@ -591,16 +594,11 @@ static struct wine_rb_entry *find_view_inside_range( void **base_ptr, void **end
 static void* try_map_free_area( void *base, void *end, ptrdiff_t step,
                                 void *start, size_t size, int unix_prot )
 {
-    static unsigned char vec;
     void *ptr;
 
     while (start && base <= start && (char*)start + size <= (char*)end)
     {
-        if (!mincore(start, page_size, &vec))
-        {
-            ptr = NULL;
-        }
-        else if ((ptr = wine_anon_mmap( start, size, unix_prot, 0 )) == start)
+        if ((ptr = wine_anon_mmap( start, size, unix_prot, 0 )) == start)
         {
             return start;
         }
@@ -617,6 +615,13 @@ static void* try_map_free_area( void *base, void *end, ptrdiff_t step,
 
         TRACE( "Found free area is already mapped, start %p, ptr %p.\n", start, ptr );
 
+        if (!last_already_mapped && step)
+        {
+            last_already_mapped = start;
+            last_already_mapped_size = step > 0 ? step : -step;
+            last_already_mapped_size = min(last_already_mapped_size, (char *)end - (char *)start);
+        }
+
         if ((step > 0 && (char *)end - (char *)start < step) ||
             (step < 0 && (char *)start - (char *)base < -step) ||
             step == 0)
@@ -1188,6 +1193,8 @@ static int alloc_free_area_callback( void *base, size_t area_size, void *arg )
     ptrdiff_t step = alloc->top_down ? -(alloc->mask + 1) : (alloc->mask + 1);
     void *start;
 
+    TRACE("base %p, area_size %p, size %p.\n", base, (void *)area_size, (void *)size);
+
     if (base < address_space_start) base = address_space_start;
     if (is_beyond_limit( base, size, alloc->limit )) end = alloc->limit;
     if (base >= end) return 0;
@@ -1319,11 +1326,20 @@ static NTSTATUS map_view( struct file_view **view_ret, void *base, size_t size,
             goto done;
         }
 
+        last_already_mapped = NULL;
+
         if (is_win64 || zero_bits_64)
         {
             if (!wine_mmap_enum_free_areas( alloc_free_area_callback, &alloc, top_down ))
                 return STATUS_NO_MEMORY;
 
+        if (last_already_mapped)
+        {
+            TRACE("Permanently excluding %p - %p from free list.\n",
+                    last_already_mapped, (char *)last_already_mapped + last_already_mapped_size - 1);
+            wine_mmap_remove_free_area(last_already_mapped, last_already_mapped_size, 0);
+        }
+
             ptr = alloc.result;
             TRACE( "got mem in free area %p-%p\n", ptr, (char *)ptr + size );
             goto done;
-- 
2.24.1

