From b1b19abce8d3695aa35a6bfefb5c5aee9748c4ad Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <joseph.kucia@gmail.com>
Date: Wed, 4 Apr 2018 17:05:37 +0200
Subject: [PATCH] d3d11: Add IWineD3D11Texture2D interface.

---
 dlls/d3d11/d3d11_private.h       |  4 +-
 dlls/d3d11/device.c              |  4 +-
 dlls/d3d11/texture.c             | 65 +++++++++++++++++++++-----------
 include/Makefile.in              |  1 +
 include/wine/wined3d-interop.idl | 31 +++++++++++++++
 5 files changed, 80 insertions(+), 25 deletions(-)
 create mode 100644 include/wine/wined3d-interop.idl

diff --git a/dlls/d3d11/d3d11_private.h b/dlls/d3d11/d3d11_private.h
index 44e774b8b4d..7b1c8c91f87 100644
--- a/dlls/d3d11/d3d11_private.h
+++ b/dlls/d3d11/d3d11_private.h
@@ -39,6 +39,8 @@
 #include "wine/winedxgi.h"
 #include "wine/rbtree.h"
 
+#include "wine/wined3d-interop.h"
+
 #define MAKE_TAG(ch0, ch1, ch2, ch3) \
     ((DWORD)(ch0) | ((DWORD)(ch1) << 8) | \
     ((DWORD)(ch2) << 16) | ((DWORD)(ch3) << 24 ))
@@ -124,7 +126,7 @@ struct d3d_texture1d *unsafe_impl_from_ID3D10Texture1D(ID3D10Texture1D *iface) D
 /* ID3D11Texture2D, ID3D10Texture2D */
 struct d3d_texture2d
 {
-    ID3D11Texture2D ID3D11Texture2D_iface;
+    IWineD3D11Texture2D ID3D11Texture2D_iface;
     ID3D10Texture2D ID3D10Texture2D_iface;
     LONG refcount;
 
diff --git a/dlls/d3d11/device.c b/dlls/d3d11/device.c
index 7ad3d9b5e9b..ad5bfa985c3 100644
--- a/dlls/d3d11/device.c
+++ b/dlls/d3d11/device.c
@@ -2859,7 +2859,7 @@ static HRESULT STDMETHODCALLTYPE d3d11_device_CreateTexture2D(ID3D11Device2 *ifa
     if (FAILED(hr = d3d_texture2d_create(device, desc, data, &object)))
         return hr;
 
-    *texture = &object->ID3D11Texture2D_iface;
+    *texture = (ID3D11Texture2D *)&object->ID3D11Texture2D_iface;
 
     return S_OK;
 }
@@ -6100,7 +6100,7 @@ static HRESULT CDECL device_parent_create_swapchain_texture(struct wined3d_devic
 
     *wined3d_texture = texture->wined3d_texture;
     wined3d_texture_incref(*wined3d_texture);
-    ID3D11Texture2D_Release(&texture->ID3D11Texture2D_iface);
+    IWineD3D11Texture2D_Release(&texture->ID3D11Texture2D_iface);
 
     return S_OK;
 }
diff --git a/dlls/d3d11/texture.c b/dlls/d3d11/texture.c
index 78821955604..bf6fd4e8b9d 100644
--- a/dlls/d3d11/texture.c
+++ b/dlls/d3d11/texture.c
@@ -521,13 +521,20 @@ HRESULT d3d_texture1d_create(struct d3d_device *device, const D3D11_TEXTURE1D_DE
 
 /* ID3D11Texture2D methods */
 
-static HRESULT STDMETHODCALLTYPE d3d11_texture2d_QueryInterface(ID3D11Texture2D *iface, REFIID riid, void **object)
+static inline struct d3d_texture2d *impl_from_IWineD3D11Texture2D(IWineD3D11Texture2D *iface)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    return CONTAINING_RECORD(iface, struct d3d_texture2d, ID3D11Texture2D_iface);
+}
+
+static HRESULT STDMETHODCALLTYPE d3d11_texture2d_QueryInterface(IWineD3D11Texture2D *iface,
+        REFIID riid, void **object)
+{
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
 
     TRACE("iface %p, riid %s, object %p.\n", iface, debugstr_guid(riid), object);
 
-    if (IsEqualGUID(riid, &IID_ID3D11Texture2D)
+    if (IsEqualGUID(riid, &IID_IWineD3D11Texture2D)
+            || IsEqualGUID(riid, &IID_ID3D11Texture2D)
             || IsEqualGUID(riid, &IID_ID3D11Resource)
             || IsEqualGUID(riid, &IID_ID3D11DeviceChild)
             || IsEqualGUID(riid, &IID_IUnknown))
@@ -557,9 +564,9 @@ static HRESULT STDMETHODCALLTYPE d3d11_texture2d_QueryInterface(ID3D11Texture2D
     return E_NOINTERFACE;
 }
 
-static ULONG STDMETHODCALLTYPE d3d11_texture2d_AddRef(ID3D11Texture2D *iface)
+static ULONG STDMETHODCALLTYPE d3d11_texture2d_AddRef(IWineD3D11Texture2D *iface)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     ULONG refcount = InterlockedIncrement(&texture->refcount);
 
     TRACE("%p increasing refcount to %u.\n", texture, refcount);
@@ -575,9 +582,9 @@ static ULONG STDMETHODCALLTYPE d3d11_texture2d_AddRef(ID3D11Texture2D *iface)
     return refcount;
 }
 
-static ULONG STDMETHODCALLTYPE d3d11_texture2d_Release(ID3D11Texture2D *iface)
+static ULONG STDMETHODCALLTYPE d3d11_texture2d_Release(IWineD3D11Texture2D *iface)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     ULONG refcount = InterlockedDecrement(&texture->refcount);
 
     TRACE("%p decreasing refcount to %u.\n", texture, refcount);
@@ -597,9 +604,9 @@ static ULONG STDMETHODCALLTYPE d3d11_texture2d_Release(ID3D11Texture2D *iface)
     return refcount;
 }
 
-static void STDMETHODCALLTYPE d3d11_texture2d_GetDevice(ID3D11Texture2D *iface, ID3D11Device **device)
+static void STDMETHODCALLTYPE d3d11_texture2d_GetDevice(IWineD3D11Texture2D *iface, ID3D11Device **device)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
 
     TRACE("iface %p, device %p.\n", iface, device);
 
@@ -607,10 +614,10 @@ static void STDMETHODCALLTYPE d3d11_texture2d_GetDevice(ID3D11Texture2D *iface,
     ID3D11Device_AddRef(*device);
 }
 
-static HRESULT STDMETHODCALLTYPE d3d11_texture2d_GetPrivateData(ID3D11Texture2D *iface,
+static HRESULT STDMETHODCALLTYPE d3d11_texture2d_GetPrivateData(IWineD3D11Texture2D *iface,
         REFGUID guid, UINT *data_size, void *data)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     IDXGISurface *dxgi_surface;
     HRESULT hr;
 
@@ -627,10 +634,10 @@ static HRESULT STDMETHODCALLTYPE d3d11_texture2d_GetPrivateData(ID3D11Texture2D
     return d3d_get_private_data(&texture->private_store, guid, data_size, data);
 }
 
-static HRESULT STDMETHODCALLTYPE d3d11_texture2d_SetPrivateData(ID3D11Texture2D *iface,
+static HRESULT STDMETHODCALLTYPE d3d11_texture2d_SetPrivateData(IWineD3D11Texture2D *iface,
         REFGUID guid, UINT data_size, const void *data)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     IDXGISurface *dxgi_surface;
     HRESULT hr;
 
@@ -647,10 +654,10 @@ static HRESULT STDMETHODCALLTYPE d3d11_texture2d_SetPrivateData(ID3D11Texture2D
     return d3d_set_private_data(&texture->private_store, guid, data_size, data);
 }
 
-static HRESULT STDMETHODCALLTYPE d3d11_texture2d_SetPrivateDataInterface(ID3D11Texture2D *iface,
+static HRESULT STDMETHODCALLTYPE d3d11_texture2d_SetPrivateDataInterface(IWineD3D11Texture2D *iface,
         REFGUID guid, const IUnknown *data)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     IDXGISurface *dxgi_surface;
     HRESULT hr;
 
@@ -667,7 +674,7 @@ static HRESULT STDMETHODCALLTYPE d3d11_texture2d_SetPrivateDataInterface(ID3D11T
     return d3d_set_private_data_interface(&texture->private_store, guid, data);
 }
 
-static void STDMETHODCALLTYPE d3d11_texture2d_GetType(ID3D11Texture2D *iface,
+static void STDMETHODCALLTYPE d3d11_texture2d_GetType(IWineD3D11Texture2D *iface,
         D3D11_RESOURCE_DIMENSION *resource_dimension)
 {
     TRACE("iface %p, resource_dimension %p.\n", iface, resource_dimension);
@@ -675,21 +682,21 @@ static void STDMETHODCALLTYPE d3d11_texture2d_GetType(ID3D11Texture2D *iface,
     *resource_dimension = D3D11_RESOURCE_DIMENSION_TEXTURE2D;
 }
 
-static void STDMETHODCALLTYPE d3d11_texture2d_SetEvictionPriority(ID3D11Texture2D *iface, UINT eviction_priority)
+static void STDMETHODCALLTYPE d3d11_texture2d_SetEvictionPriority(IWineD3D11Texture2D *iface, UINT eviction_priority)
 {
     FIXME("iface %p, eviction_priority %#x stub!\n", iface, eviction_priority);
 }
 
-static UINT STDMETHODCALLTYPE d3d11_texture2d_GetEvictionPriority(ID3D11Texture2D *iface)
+static UINT STDMETHODCALLTYPE d3d11_texture2d_GetEvictionPriority(IWineD3D11Texture2D *iface)
 {
     FIXME("iface %p stub!\n", iface);
 
     return 0;
 }
 
-static void STDMETHODCALLTYPE d3d11_texture2d_GetDesc(ID3D11Texture2D *iface, D3D11_TEXTURE2D_DESC *desc)
+static void STDMETHODCALLTYPE d3d11_texture2d_GetDesc(IWineD3D11Texture2D *iface, D3D11_TEXTURE2D_DESC *desc)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     struct wined3d_resource_desc wined3d_desc;
 
     TRACE("iface %p, desc %p.\n", iface, desc);
@@ -711,7 +718,19 @@ static void STDMETHODCALLTYPE d3d11_texture2d_GetDesc(ID3D11Texture2D *iface, D3
     desc->SampleDesc.Quality = wined3d_desc.multisample_quality;
 }
 
-static const struct ID3D11Texture2DVtbl d3d11_texture2d_vtbl =
+static void STDMETHODCALLTYPE d3d11_texture2d_access_gl_texture(IWineD3D11Texture2D *iface,
+        gl_texture_callback callback, const void *data, unsigned int size)
+{
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
+
+    TRACE("iface %p, callback %p, data %p, size %u.\n", iface, callback, data, size);
+
+    wined3d_mutex_lock();
+    wined3d_access_gl_texture(texture->wined3d_texture, callback, data, size);
+    wined3d_mutex_unlock();
+}
+
+static const struct IWineD3D11Texture2DVtbl d3d11_texture2d_vtbl =
 {
     /* IUnknown methods */
     d3d11_texture2d_QueryInterface,
@@ -728,13 +747,15 @@ static const struct ID3D11Texture2DVtbl d3d11_texture2d_vtbl =
     d3d11_texture2d_GetEvictionPriority,
     /* ID3D11Texture2D methods */
     d3d11_texture2d_GetDesc,
+    /* IWineD3D11Texture methods */
+    d3d11_texture2d_access_gl_texture,
 };
 
 struct d3d_texture2d *unsafe_impl_from_ID3D11Texture2D(ID3D11Texture2D *iface)
 {
     if (!iface)
         return NULL;
-    assert(iface->lpVtbl == &d3d11_texture2d_vtbl);
+    assert(iface->lpVtbl == (void *)&d3d11_texture2d_vtbl);
     return CONTAINING_RECORD(iface, struct d3d_texture2d, ID3D11Texture2D_iface);
 }
 
diff --git a/include/Makefile.in b/include/Makefile.in
index eaf31149de2..d2c5a28acbb 100644
--- a/include/Makefile.in
+++ b/include/Makefile.in
@@ -681,6 +681,7 @@ SOURCES = \
 	wine/library.h \
 	wine/svcctl.idl \
 	wine/unicode.h \
+	wine/wined3d-interop.idl \
 	wine/winedxgi.idl \
 	winerror.h \
 	winevt.h \
diff --git a/include/wine/wined3d-interop.idl b/include/wine/wined3d-interop.idl
new file mode 100644
index 00000000000..884baf958c2
--- /dev/null
+++ b/include/wine/wined3d-interop.idl
@@ -0,0 +1,31 @@
+/*
+ * Copyright 2018 Józef Kucia for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+typedef void (__cdecl *gl_texture_callback)(unsigned int gl_texture, const void *data, unsigned int data_size);
+
+import "d3d11.idl";
+
+[
+    object,
+    local,
+    uuid(267dc993-d15e-4015-aaac-b7559e226cc3)
+]
+interface IWineD3D11Texture2D : ID3D11Texture2D
+{
+    void access_gl_texture(gl_texture_callback callback, const void *data, unsigned int data_size);
+}
