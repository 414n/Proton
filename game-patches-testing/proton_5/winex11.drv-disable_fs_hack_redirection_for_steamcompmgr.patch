From 1f5ea2b80ea2d063c2a16b25c21e02e32a4852b8 Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Thu, 30 Jan 2020 13:51:26 -0600
Subject: [PATCH] winex11.drv: Disable fs hack redirection for steamcompmgr

---
 dlls/winex11.drv/desktop.c     |  2 +-
 dlls/winex11.drv/settings.c    | 18 ++++++---
 dlls/winex11.drv/window.c      | 70 ++++++++++++++++++++++++++--------
 dlls/winex11.drv/x11drv.h      |  4 ++
 dlls/winex11.drv/x11drv_main.c |  2 +
 dlls/winex11.drv/xrender.c     | 10 ++---
 6 files changed, 79 insertions(+), 27 deletions(-)

diff --git a/dlls/winex11.drv/desktop.c b/dlls/winex11.drv/desktop.c
index 8f6de586665..79ba54b584b 100644
--- a/dlls/winex11.drv/desktop.c
+++ b/dlls/winex11.drv/desktop.c
@@ -336,7 +336,7 @@ static BOOL CALLBACK update_windows_on_desktop_resize( HWND hwnd, LPARAM lparam
 
     if (!(data = get_win_data( hwnd ))) return TRUE;
 
-    if (fs_hack_enabled() &&
+    if (fs_hack_mapping_required() &&
             fs_hack_matches_current_mode(
                 data->whole_rect.right - data->whole_rect.left,
                 data->whole_rect.bottom - data->whole_rect.top)){
diff --git a/dlls/winex11.drv/settings.c b/dlls/winex11.drv/settings.c
index 7974596548c..b9cefa45bae 100644
--- a/dlls/winex11.drv/settings.c
+++ b/dlls/winex11.drv/settings.c
@@ -275,6 +275,14 @@ BOOL fs_hack_enabled(void)
         currentMode != realMode;
 }
 
+BOOL fs_hack_mapping_required(void)
+{
+    /* steamcompmgr does our mapping for us */
+    return !wm_is_steamcompmgr(NULL) &&
+        currentMode >= 0 &&
+        currentMode != realMode;
+}
+
 BOOL fs_hack_is_integer(void)
 {
     static int is_int = -1;
@@ -307,7 +315,7 @@ BOOL fs_hack_matches_last_mode(int w, int h)
 
 void fs_hack_scale_user_to_real(POINT *pos)
 {
-    if(fs_hack_enabled()){
+    if(fs_hack_mapping_required()){
         TRACE("from %d,%d\n", pos->x, pos->y);
         pos->x = lround(pos->x * fs_hack_user_to_real_w);
         pos->y = lround(pos->y * fs_hack_user_to_real_h);
@@ -317,7 +325,7 @@ void fs_hack_scale_user_to_real(POINT *pos)
 
 void fs_hack_scale_real_to_user(POINT *pos)
 {
-    if(fs_hack_enabled()){
+    if(fs_hack_mapping_required()){
         TRACE("from %d,%d\n", pos->x, pos->y);
         pos->x = lround(pos->x * fs_hack_real_to_user_w);
         pos->y = lround(pos->y * fs_hack_real_to_user_h);
@@ -335,7 +343,7 @@ POINT fs_hack_get_scaled_screen_size(void)
 
 void fs_hack_user_to_real(POINT *pos)
 {
-    if(fs_hack_enabled()){
+    if(fs_hack_mapping_required()){
         TRACE("from %d,%d\n", pos->x, pos->y);
         fs_hack_scale_user_to_real(pos);
         pos->x += offs_x;
@@ -346,7 +354,7 @@ void fs_hack_user_to_real(POINT *pos)
 
 void fs_hack_real_to_user(POINT *pos)
 {
-    if(fs_hack_enabled()){
+    if(fs_hack_mapping_required()){
         TRACE("from %d,%d\n", pos->x, pos->y);
 
         if(pos->x <= offs_x)
@@ -382,7 +390,7 @@ void fs_hack_rgndata_user_to_real(RGNDATA *data)
     unsigned int i;
     XRectangle *xrect;
 
-    if (data && fs_hack_enabled())
+    if (data && fs_hack_mapping_required())
     {
         xrect = (XRectangle *)data->Buffer;
         for (i = 0; i < data->rdh.nCount; i++)
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 77cf9f1d1b1..1f1a2d59e2e 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -102,42 +102,77 @@ static CRITICAL_SECTION_DEBUG critsect_debug =
 };
 static CRITICAL_SECTION win_data_section = { &critsect_debug, -1, 0, 0, 0, 0 };
 
+static const int WM_UNKNOWN = 0;
+static const int WM_MUTTER = 1;
+static const int WM_STEAMCOMPMGR = 2;
 
 /* enable workarounds for mutter bugs */
-BOOL wm_is_mutter(Display *display)
+static int detect_wm(Display *dpy)
 {
+    Display *display = dpy ? dpy : thread_init_display(); /* DefaultRootWindow is a macro... */
     Window root = DefaultRootWindow(display), *wm_check;
     Atom type;
     int format;
     unsigned long count, remaining;
-    static int cached = -1;
     char *wm_name;
 
+    static int cached = -1;
+
     if(cached < 0){
+
         if (XGetWindowProperty( display, root, x11drv_atom(_NET_SUPPORTING_WM_CHECK), 0,
                                  sizeof(*wm_check)/sizeof(CARD32), False, x11drv_atom(WINDOW),
                                  &type, &format, &count, &remaining, (unsigned char **)&wm_check ) == Success){
-            if (type == x11drv_atom(WINDOW) &&
-                    XGetWindowProperty( display, *wm_check, x11drv_atom(_NET_WM_NAME), 0,
-                        256/sizeof(CARD32), False, x11drv_atom(UTF8_STRING),
-                        &type, &format, &count, &remaining, (unsigned char **)&wm_name) == Success){
-                if(type == x11drv_atom(UTF8_STRING)){
-                    TRACE("Got WM name %s\n", wm_name);
-                    cached = (strcmp(wm_name, "GNOME Shell") == 0) ||
-                        (strcmp(wm_name, "Mutter") == 0);
+            if (type == x11drv_atom(WINDOW)){
+                if(XGetWindowProperty( display, *wm_check, x11drv_atom(_NET_WM_NAME), 0,
+                            256/sizeof(CARD32), False, x11drv_atom(UTF8_STRING),
+                            &type, &format, &count, &remaining, (unsigned char **)&wm_name) == Success &&
+                        type == x11drv_atom(UTF8_STRING)){
+                    /* noop */
+                }else if(XGetWindowProperty( display, *wm_check, x11drv_atom(WM_NAME), 0,
+                            256/sizeof(CARD32), False, x11drv_atom(STRING),
+                            &type, &format, &count, &remaining, (unsigned char **)&wm_name) == Success &&
+                        type == x11drv_atom(STRING)){
+                    /* noop */
                 }else
-                    cached = 0;
-                XFree(wm_name);
+                    wm_name = NULL;
+
+                if(wm_name){
+                    TRACE("Got WM name %s\n", wm_name);
+
+                    if((strcmp(wm_name, "GNOME Shell") == 0) ||
+                            (strcmp(wm_name, "Mutter") == 0))
+                        cached = WM_MUTTER;
+                    else if(strcmp(wm_name, "steamcompmgr") == 0)
+                        cached = WM_STEAMCOMPMGR;
+                    else
+                        cached = WM_UNKNOWN;
+
+                    XFree(wm_name);
+                }else{
+                    TRACE("WM did not set _NET_WM_NAME or WM_NAME\n");
+                    cached = WM_UNKNOWN;
+                }
             }else
-                cached = 0;
+                cached = WM_UNKNOWN;
+
             XFree(wm_check);
         }else
-            cached = 0;
+            cached = WM_UNKNOWN;
     }
 
     return cached;
 }
 
+BOOL wm_is_mutter(Display *display)
+{
+    return detect_wm(display) == WM_MUTTER;
+}
+
+BOOL wm_is_steamcompmgr(Display *display)
+{
+    return detect_wm(display) == WM_STEAMCOMPMGR;
+}
 
 /***********************************************************************
  * http://standards.freedesktop.org/startup-notification-spec
@@ -1077,7 +1112,9 @@ void update_net_wm_states( struct x11drv_win_data *data )
         else if (!(style & WS_MINIMIZE))
 	{
             net_wm_bypass_compositor = 1;
-            new_state |= (1 << NET_WM_STATE_FULLSCREEN);
+            if (!wm_is_steamcompmgr(data->display) || !fs_hack_enabled())
+                /* when fs hack is enabled, we don't want steamcompmgr to resize the window to be fullscreened */
+                new_state |= (1 << NET_WM_STATE_FULLSCREEN);
 	}
     }
     else if (style & WS_MAXIMIZE)
@@ -2464,7 +2501,8 @@ void CDECL X11DRV_WindowPosChanging( HWND hwnd, HWND insert_after, UINT swp_flag
 
     if (!data && !(data = X11DRV_create_win_data( hwnd, window_rect, client_rect ))) return;
 
-    if(!data->fs_hack &&
+    if(!wm_is_steamcompmgr(data->display) &&
+            !data->fs_hack &&
             fs_hack_matches_current_mode(
                 window_rect->right - window_rect->left,
                 window_rect->bottom - window_rect->top)){
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 3d1c2cbce01..bd50805fb61 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -427,6 +427,7 @@ enum x11drv_atoms
     XATOM_TEXT,
     XATOM_TIMESTAMP,
     XATOM_UTF8_STRING,
+    XATOM_STRING,
     XATOM_RAW_ASCENT,
     XATOM_RAW_DESCENT,
     XATOM_RAW_CAP_HEIGHT,
@@ -434,6 +435,7 @@ enum x11drv_atoms
     XATOM_Rel_Y,
     XATOM_WM_PROTOCOLS,
     XATOM_WM_DELETE_WINDOW,
+    XATOM_WM_NAME,
     XATOM_WM_STATE,
     XATOM_WM_TAKE_FOCUS,
     XATOM_DndProtocol,
@@ -618,9 +620,11 @@ extern void update_systray_balloon_position(void) DECLSPEC_HIDDEN;
 extern HWND create_foreign_window( Display *display, Window window ) DECLSPEC_HIDDEN;
 extern BOOL update_clipboard( HWND hwnd ) DECLSPEC_HIDDEN;
 extern BOOL wm_is_mutter(Display *) DECLSPEC_HIDDEN;
+extern BOOL wm_is_steamcompmgr(Display *) DECLSPEC_HIDDEN;
 
 extern void set_wm_hints( struct x11drv_win_data *data ) DECLSPEC_HIDDEN;
 extern BOOL fs_hack_enabled(void) DECLSPEC_HIDDEN;
+extern BOOL fs_hack_mapping_required(void) DECLSPEC_HIDDEN;
 extern BOOL fs_hack_is_integer(void) DECLSPEC_HIDDEN;
 extern BOOL fs_hack_matches_current_mode(int w, int h) DECLSPEC_HIDDEN;
 extern BOOL fs_hack_matches_real_mode(int w, int h) DECLSPEC_HIDDEN;
diff --git a/dlls/winex11.drv/x11drv_main.c b/dlls/winex11.drv/x11drv_main.c
index c5f2e44cf66..a67acbbc434 100644
--- a/dlls/winex11.drv/x11drv_main.c
+++ b/dlls/winex11.drv/x11drv_main.c
@@ -138,6 +138,7 @@ static const char * const atom_names[NB_XATOMS - FIRST_XATOM] =
     "TEXT",
     "TIMESTAMP",
     "UTF8_STRING",
+    "STRING",
     "RAW_ASCENT",
     "RAW_DESCENT",
     "RAW_CAP_HEIGHT",
@@ -145,6 +146,7 @@ static const char * const atom_names[NB_XATOMS - FIRST_XATOM] =
     "Rel Y",
     "WM_PROTOCOLS",
     "WM_DELETE_WINDOW",
+    "WM_NAME",
     "WM_STATE",
     "WM_TAKE_FOCUS",
     "DndProtocol",
diff --git a/dlls/winex11.drv/xrender.c b/dlls/winex11.drv/xrender.c
index 34455a976e3..8d5e59a9236 100644
--- a/dlls/winex11.drv/xrender.c
+++ b/dlls/winex11.drv/xrender.c
@@ -1510,7 +1510,7 @@ static void xrender_blit( int op, Picture src_pict, Picture mask_pict, Picture d
 {
     int x_offset, y_offset;
 
-    if (fs_hack_enabled())
+    if (fs_hack_mapping_required())
     {
         POINT p;
         p.x = x_dst;
@@ -1564,7 +1564,7 @@ static void xrender_blit( int op, Picture src_pict, Picture mask_pict, Picture d
     pXRenderComposite( gdi_display, op, src_pict, mask_pict, dst_pict,
                        x_offset, y_offset, 0, 0, x_dst, y_dst, width_dst, height_dst );
 
-    if (fs_hack_enabled())
+    if (fs_hack_mapping_required())
         fs_hack_draw_black_bars( dst_pict );
 }
 
@@ -1800,7 +1800,7 @@ static BOOL CDECL xrenderdrv_StretchBlt( PHYSDEV dst_dev, struct bitblt_coords *
     if (physdev_dst->format == WXR_FORMAT_MONO && physdev_src->format != WXR_FORMAT_MONO)
         goto x11drv_fallback;
 
-    if (fs_hack_enabled())
+    if (fs_hack_mapping_required())
         stretch = TRUE;
 
     /* if not stretching, we only need to handle format conversion */
@@ -1822,7 +1822,7 @@ static BOOL CDECL xrenderdrv_StretchBlt( PHYSDEV dst_dev, struct bitblt_coords *
         XSetSubwindowMode( gdi_display, tmpGC, IncludeInferiors );
         XSetGraphicsExposures( gdi_display, tmpGC, False );
 
-        if (fs_hack_enabled())
+        if (fs_hack_mapping_required())
         {
             unsigned int real_width  = (tmp.visrect.right - tmp.visrect.left) * fs_hack_user_to_real_w;
             unsigned int real_height = (tmp.visrect.bottom - tmp.visrect.top) * fs_hack_user_to_real_h;
@@ -1905,7 +1905,7 @@ static DWORD CDECL xrenderdrv_PutImage( PHYSDEV dev, HRGN clip, BITMAPINFO *info
             XSetSubwindowMode( gdi_display, gc, IncludeInferiors );
             XSetGraphicsExposures( gdi_display, gc, False );
 
-            if (fs_hack_enabled())
+            if (fs_hack_mapping_required())
             {
                 unsigned int real_width  = (tmp.visrect.right - tmp.visrect.left) * fs_hack_user_to_real_w;
                 unsigned int real_height = (tmp.visrect.bottom - tmp.visrect.top) * fs_hack_user_to_real_h;
