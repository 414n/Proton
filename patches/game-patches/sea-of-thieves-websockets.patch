diff --git a/dlls/winhttp/request.c b/dlls/winhttp/request.c
index fbccf02..67a213e 100644
--- a/dlls/winhttp/request.c
+++ b/dlls/winhttp/request.c
@@ -2745,9 +2745,8 @@ static DWORD receive_response( struct request *request, BOOL async )
         }
         break;
     }
-
     netconn_set_timeout( request->netconn, FALSE, request->receive_timeout );
-    if (request->content_length) ret = refill_buffer( request, FALSE );
+    if (status != 101 && request->content_length) ret = refill_buffer( request, FALSE );
 
     if (async)
     {
diff --git a/dlls/winhttp/session.c b/dlls/winhttp/session.c
index 24455d8..d4be7e2 100644
--- a/dlls/winhttp/session.c
+++ b/dlls/winhttp/session.c
@@ -1041,6 +1041,30 @@ static BOOL request_set_option( struct object_header *hdr, DWORD option, void *b
     case WINHTTP_OPTION_CONNECT_RETRIES:
         FIXME("WINHTTP_OPTION_CONNECT_RETRIES\n");
         return TRUE;
+        
+    case 114: // WINHTTP_OPTION_UPGRADE_TO_WEB_SOCKET
+        FIXME("SOCKET UPGRADE\n");
+        add_request_headers(request, L"connection:Upgrade", (ULONG)-1L, WINHTTP_ADDREQ_FLAG_ADD);
+        add_request_headers(request, L"upgrade:websocket", (ULONG)-1L, WINHTTP_ADDREQ_FLAG_ADD);
+        add_request_headers(request, L"sec-websocket-version:13", (ULONG)-1L, WINHTTP_ADDREQ_FLAG_ADD);
+        BYTE buf[16];
+        srand(time(NULL));
+        for(size_t i = 0; i < sizeof(buf); i++)
+            buf[i] = rand() % 256;
+        DWORD  outLen;
+        WCHAR strW[64];
+        if (CryptBinaryToStringW(buf, sizeof(buf), CRYPT_STRING_BASE64, NULL, &outLen)) {
+            if (CryptBinaryToStringW(buf, sizeof(buf), CRYPT_STRING_BASE64, &strW, &outLen)) {
+//                 printf("Random sequence generated. %S\n", strW);
+                const size_t WCHARBUF = 100;
+                const char szSource[] = "";
+                sprintf(szSource, "sec-websocket-key:%S", strW);
+                wchar_t  wszDest[WCHARBUF];
+                MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, szSource, -1, wszDest, WCHARBUF);
+                add_request_headers(request, wszDest, (ULONG)-1L, WINHTTP_ADDREQ_FLAG_ADD);
+            }
+        }
+        return TRUE;
 
     default:
         FIXME("unimplemented option %u\n", option);
@@ -2035,6 +2059,108 @@ BOOL WINAPI WinHttpSetDefaultProxyConfiguration( WINHTTP_PROXY_INFO *info )
     return ret;
 }
 
+typedef enum _WINHTTP_WEB_SOCKET_BUFFER_TYPE {
+  WINHTTP_WEB_SOCKET_BINARY_MESSAGE_BUFFER_TYPE,
+  WINHTTP_WEB_SOCKET_BINARY_FRAGMENT_BUFFER_TYPE,
+  WINHTTP_WEB_SOCKET_UTF8_MESSAGE_BUFFER_TYPE,
+  WINHTTP_WEB_SOCKET_UTF8_FRAGMENT_BUFFER_TYPE,
+  WINHTTP_WEB_SOCKET_CLOSE_BUFFER_TYPE
+} WINHTTP_WEB_SOCKET_BUFFER_TYPE;
+
+HINTERNET WINAPI WinHttpWebSocketCompleteUpgrade (HINTERNET handle, DWORD_PTR reserved)
+{
+    struct request *request;
+    if (!(request = (struct request *)grab_object( handle )))
+    {
+        printf("nope\n");
+    }
+    HINTERNET hconnect = NULL;
+    if (!(hconnect = alloc_handle( &request->hdr )))
+    return hconnect;
+}
+
+DWORD WINAPI WinHttpWebSocketSend (HINTERNET hWebSocket, WINHTTP_WEB_SOCKET_BUFFER_TYPE eBufferType, PVOID pvBuffer, DWORD dwBufferLength)
+{
+    struct request *request;
+    if (!(request = (struct request *)grab_object( hWebSocket )))
+    {
+        return 11;
+    }
+    const char strdata[dwBufferLength];
+    sprintf(strdata, "%S", pvBuffer);
+    struct timeval tv;
+    unsigned char mask[4];
+    unsigned int mask_int;
+    unsigned long long payload_len;
+    unsigned char finNopcode;
+    unsigned int payload_len_small;
+    unsigned int payload_offset = 6;
+    unsigned int len_size;
+    unsigned long long be_payload_len;
+    unsigned int sent = 0;
+    unsigned int frame_size;
+    char *data;
+    int i;
+    srand(time(NULL));
+    mask_int = rand();
+    memcpy(mask, &mask_int, 4);
+    payload_len = strlen(strdata);
+    finNopcode = 0x81; //FIN and text opcode.
+    if(payload_len <= 125) {
+            frame_size = 6 + payload_len;
+            payload_len_small = payload_len;
+
+    } else if(payload_len > 125 && payload_len <= 0xffff) {
+            frame_size = 8 + payload_len;
+            payload_len_small = 126;
+            payload_offset += 2;
+    } else if(payload_len > 0xffff && payload_len <= 0xffffffffffffffffLL) {
+            frame_size = 14 + payload_len;
+            payload_len_small = 127;
+            payload_offset += 8;
+    } else {
+            return -1;
+    }
+    data = (char *)malloc(frame_size);
+    memset(data, 0, frame_size);
+    *data = finNopcode;
+    *(data+1) = payload_len_small | 0x80; //payload length with mask bit on
+    if(payload_len_small == 126) {
+            payload_len &= 0xffff;
+            len_size = 2;
+            for(i = 0; i < len_size; i++) {
+                    *(data+2+i) = *((char *)&payload_len+(len_size-i-1));
+            }
+    }
+    if(payload_len_small == 127) {
+            payload_len &= 0xffffffffffffffffLL;
+            len_size = 8;
+            for(i = 0; i < len_size; i++) {
+                    *(data+2+i) = *((char *)&payload_len+(len_size-i-1));
+            }
+    }
+    for(i=0;i<4;i++)
+            *(data+(payload_offset-4)+i) = mask[i];
+
+    memcpy(data+payload_offset, strdata, strlen(strdata));
+    for(i=0;i<strlen(strdata);i++)
+            *(data+payload_offset+i) ^= mask[i % 4] & 0xff;
+    sent = 0;
+    i = 0;
+    while(sent < frame_size && i >= 0) {
+            netconn_send(request->netconn, data+sent, frame_size - sent, &i);
+            sent += i;
+    }
+    free(data);
+    return 0;
+}
+
+DWORD WINAPI WinHttpWebSocketReceive (HINTERNET hWebSocket, PVOID pvBuffer, DWORD dwBufferLength, DWORD *pdwBytesRead, WINHTTP_WEB_SOCKET_BUFFER_TYPE *peBufferType)
+{
+    return -1;
+}
+
+
 /***********************************************************************
  *          WinHttpSetStatusCallback (winhttp.@)
  */
diff --git a/dlls/winhttp/winhttp.spec b/dlls/winhttp/winhttp.spec
index 28dcb15..d1babdd 100644
--- a/dlls/winhttp/winhttp.spec
+++ b/dlls/winhttp/winhttp.spec
@@ -29,3 +29,6 @@
 @ stdcall WinHttpTimeFromSystemTime(ptr ptr)
 @ stdcall WinHttpTimeToSystemTime(wstr ptr)
 @ stdcall WinHttpWriteData(ptr ptr long ptr)
+@ stdcall WinHttpWebSocketCompleteUpgrade(ptr long)
+@ stdcall WinHttpWebSocketSend(ptr ptr ptr ptr)
+@ stdcall WinHttpWebSocketReceive(ptr ptr ptr ptr ptr)
