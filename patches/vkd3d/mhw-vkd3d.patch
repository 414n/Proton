From 5b0448ef5d955206835237aa14b000158d714f92 Mon Sep 17 00:00:00 2001
From: Philip Rebohle <philip.rebohle@tu-dortmund.de>
Date: Wed, 15 Apr 2020 18:38:15 +0200
Subject: [PATCH] vkd3d: Check whether root descriptors are defined.

Fixes a crash in Monster Hunter World.

Signed-off-by: Philip Rebohle <philip.rebohle@tu-dortmund.de>
---
 libs/vkd3d/command.c | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/libs/vkd3d/command.c b/libs/vkd3d/command.c
index 7d8aa968..f9b1d3f4 100644
--- a/libs/vkd3d/command.c
+++ b/libs/vkd3d/command.c
@@ -3217,24 +3217,33 @@ static bool vk_write_descriptor_set_from_root_descriptor(VkWriteDescriptorSet *v
 {
     const union vkd3d_descriptor_info *descriptor;
 
+    descriptor = &descriptors[root_parameter->u.descriptor.packed_descriptor];
+
     switch (root_parameter->parameter_type)
     {
         case D3D12_ROOT_PARAMETER_TYPE_CBV:
             vk_descriptor_write->descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
+
+            if (!descriptor->buffer.buffer)
+                return false;
             break;
         case D3D12_ROOT_PARAMETER_TYPE_SRV:
             vk_descriptor_write->descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER;
+
+            if (!descriptor->buffer_view)
+                return false;
             break;
         case D3D12_ROOT_PARAMETER_TYPE_UAV:
             vk_descriptor_write->descriptorType = VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER;
+
+            if (!descriptor->buffer_view)
+                return false;
             break;
         default:
             ERR("Invalid root descriptor %#x.\n", root_parameter->parameter_type);
             return false;
     }
 
-    descriptor = &descriptors[root_parameter->u.descriptor.packed_descriptor];
-
     vk_descriptor_write->sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
     vk_descriptor_write->pNext = NULL;
     vk_descriptor_write->dstSet = vk_descriptor_set;
From c9d8e8fbe12848901e55a0685bafd8e231298c09 Mon Sep 17 00:00:00 2001
From: Philip Rebohle <philip.rebohle@tu-dortmund.de>
Date: Thu, 16 Apr 2020 00:58:26 +0200
Subject: [PATCH 1/3] vkd3d: Support 1D texture views.

Signed-off-by: Philip Rebohle <philip.rebohle@tu-dortmund.de>
---
 libs/vkd3d/resource.c | 50 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 50 insertions(+)

diff --git a/libs/vkd3d/resource.c b/libs/vkd3d/resource.c
index 6eceb8b9..ee097166 100644
--- a/libs/vkd3d/resource.c
+++ b/libs/vkd3d/resource.c
@@ -2951,10 +2951,24 @@ void d3d12_desc_create_srv(struct d3d12_desc *descriptor,
 
         switch (desc->ViewDimension)
         {
+            case D3D12_SRV_DIMENSION_TEXTURE1D:
+                vkd3d_desc.view_type = VK_IMAGE_VIEW_TYPE_1D;
+                vkd3d_desc.miplevel_idx = desc->u.Texture1D.MostDetailedMip;
+                vkd3d_desc.miplevel_count = desc->u.Texture1D.MipLevels;
+                vkd3d_desc.layer_count = 1;
+                break;
+            case D3D12_SRV_DIMENSION_TEXTURE1DARRAY:
+                vkd3d_desc.view_type = VK_IMAGE_VIEW_TYPE_1D_ARRAY;
+                vkd3d_desc.miplevel_idx = desc->u.Texture1DArray.MostDetailedMip;
+                vkd3d_desc.miplevel_count = desc->u.Texture1DArray.MipLevels;
+                vkd3d_desc.layer_idx = desc->u.Texture1DArray.FirstArraySlice;
+                vkd3d_desc.layer_count = desc->u.Texture1DArray.ArraySize;
+                break;
             case D3D12_SRV_DIMENSION_TEXTURE2D:
                 vkd3d_desc.view_type = VK_IMAGE_VIEW_TYPE_2D;
                 vkd3d_desc.miplevel_idx = desc->u.Texture2D.MostDetailedMip;
                 vkd3d_desc.miplevel_count = desc->u.Texture2D.MipLevels;
+                vkd3d_desc.layer_count = 1;
                 if (desc->u.Texture2D.PlaneSlice)
                     FIXME("Ignoring plane slice %u.\n", desc->u.Texture2D.PlaneSlice);
                 if (desc->u.Texture2D.ResourceMinLODClamp)
@@ -2973,6 +2987,7 @@ void d3d12_desc_create_srv(struct d3d12_desc *descriptor,
                 break;
             case D3D12_SRV_DIMENSION_TEXTURE2DMS:
                 vkd3d_desc.view_type = VK_IMAGE_VIEW_TYPE_2D;
+                vkd3d_desc.layer_count = 1;
                 break;
             case D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY:
                 vkd3d_desc.view_type = VK_IMAGE_VIEW_TYPE_2D_ARRAY;
@@ -3182,8 +3197,21 @@ static void vkd3d_create_texture_uav(struct d3d12_desc *descriptor,
     {
         switch (desc->ViewDimension)
         {
+            case D3D12_UAV_DIMENSION_TEXTURE1D:
+                vkd3d_desc.view_type = VK_IMAGE_VIEW_TYPE_1D;
+                vkd3d_desc.miplevel_idx = desc->u.Texture1D.MipSlice;
+                vkd3d_desc.layer_count = 1;
+                break;
+            case D3D12_UAV_DIMENSION_TEXTURE1DARRAY:
+                vkd3d_desc.view_type = VK_IMAGE_VIEW_TYPE_1D_ARRAY;
+                vkd3d_desc.miplevel_idx = desc->u.Texture1DArray.MipSlice;
+                vkd3d_desc.layer_idx = desc->u.Texture1DArray.FirstArraySlice;
+                vkd3d_desc.layer_count = desc->u.Texture1DArray.ArraySize;
+                break;
             case D3D12_UAV_DIMENSION_TEXTURE2D:
+                vkd3d_desc.view_type = VK_IMAGE_VIEW_TYPE_2D;
                 vkd3d_desc.miplevel_idx = desc->u.Texture2D.MipSlice;
+                vkd3d_desc.layer_count = 1;
                 if (desc->u.Texture2D.PlaneSlice)
                     FIXME("Ignoring plane slice %u.\n", desc->u.Texture2D.PlaneSlice);
                 break;
@@ -3435,7 +3463,19 @@ void d3d12_rtv_desc_create_rtv(struct d3d12_rtv_desc *rtv_desc, struct d3d12_dev
     {
         switch (desc->ViewDimension)
         {
+            case D3D12_RTV_DIMENSION_TEXTURE1D:
+                vkd3d_desc.view_type = VK_IMAGE_VIEW_TYPE_1D;
+                vkd3d_desc.miplevel_idx = desc->u.Texture1D.MipSlice;
+                vkd3d_desc.layer_count = 1;
+                break;
+            case D3D12_RTV_DIMENSION_TEXTURE1DARRAY:
+                vkd3d_desc.view_type = VK_IMAGE_VIEW_TYPE_1D_ARRAY;
+                vkd3d_desc.miplevel_idx = desc->u.Texture1DArray.MipSlice;
+                vkd3d_desc.layer_idx = desc->u.Texture1DArray.FirstArraySlice;
+                vkd3d_desc.layer_count = desc->u.Texture1DArray.ArraySize;
+                break;
             case D3D12_RTV_DIMENSION_TEXTURE2D:
+                vkd3d_desc.view_type = VK_IMAGE_VIEW_TYPE_2D;
                 vkd3d_desc.miplevel_idx = desc->u.Texture2D.MipSlice;
                 vkd3d_desc.layer_count = 1;
                 if (desc->u.Texture2D.PlaneSlice)
@@ -3539,6 +3579,16 @@ void d3d12_dsv_desc_create_dsv(struct d3d12_dsv_desc *dsv_desc, struct d3d12_dev
 
         switch (desc->ViewDimension)
         {
+            case D3D12_DSV_DIMENSION_TEXTURE1D:
+                vkd3d_desc.miplevel_idx = desc->u.Texture1D.MipSlice;
+                vkd3d_desc.layer_count = 1;
+                break;
+            case D3D12_DSV_DIMENSION_TEXTURE1DARRAY:
+                vkd3d_desc.view_type = VK_IMAGE_VIEW_TYPE_1D_ARRAY;
+                vkd3d_desc.miplevel_idx = desc->u.Texture1DArray.MipSlice;
+                vkd3d_desc.layer_idx = desc->u.Texture1DArray.FirstArraySlice;
+                vkd3d_desc.layer_count = desc->u.Texture1DArray.ArraySize;
+                break;
             case D3D12_DSV_DIMENSION_TEXTURE2D:
                 vkd3d_desc.miplevel_idx = desc->u.Texture2D.MipSlice;
                 vkd3d_desc.layer_count = 1;

From 117f66eb22131eeff2fd51d697b5a4b63b717c98 Mon Sep 17 00:00:00 2001
From: Philip Rebohle <philip.rebohle@tu-dortmund.de>
Date: Thu, 16 Apr 2020 01:52:50 +0200
Subject: [PATCH 2/3] vkd3d-shader: Support texel offset for sample_c
 instruction.

Signed-off-by: Philip Rebohle <philip.rebohle@tu-dortmund.de>
---
 libs/vkd3d-shader/spirv.c | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

diff --git a/libs/vkd3d-shader/spirv.c b/libs/vkd3d-shader/spirv.c
index 142c9f36..e5caa48f 100644
--- a/libs/vkd3d-shader/spirv.c
+++ b/libs/vkd3d-shader/spirv.c
@@ -7934,12 +7934,9 @@ static void vkd3d_dxbc_compiler_emit_sample_c(struct vkd3d_dxbc_compiler *compil
     SpvImageOperandsMask operands_mask = 0;
     unsigned int image_operand_count = 0;
     struct vkd3d_shader_image image;
-    uint32_t image_operands[1];
+    uint32_t image_operands[2];
     SpvOp op;
 
-    if (vkd3d_shader_instruction_has_texel_offset(instruction))
-        FIXME("Texel offset not supported.\n");
-
     if (instruction->handler_idx == VKD3DSIH_SAMPLE_C_LZ)
     {
         op = SpvOpImageSampleDrefExplicitLod;
@@ -7954,6 +7951,14 @@ static void vkd3d_dxbc_compiler_emit_sample_c(struct vkd3d_dxbc_compiler *compil
 
     vkd3d_dxbc_compiler_prepare_image(compiler,
             &image, &src[1].reg, &src[2].reg, VKD3D_IMAGE_FLAG_SAMPLED | VKD3D_IMAGE_FLAG_DEPTH);
+
+    if (vkd3d_shader_instruction_has_texel_offset(instruction))
+    {
+        operands_mask |= SpvImageOperandsConstOffsetMask;
+        image_operands[image_operand_count++] = vkd3d_dxbc_compiler_emit_texel_offset(compiler,
+                instruction, image.resource_type_info);
+    }
+
     sampled_type_id = vkd3d_spirv_get_type_id(builder, image.sampled_type, 1);
     coordinate_id = vkd3d_dxbc_compiler_emit_load_src(compiler, &src[0], VKD3DSP_WRITEMASK_ALL);
     dref_id = vkd3d_dxbc_compiler_emit_load_src(compiler, &src[3], VKD3DSP_WRITEMASK_0);

From 0e9951c9a5a1fae915913d546941287366e3ff11 Mon Sep 17 00:00:00 2001
From: Philip Rebohle <philip.rebohle@tu-dortmund.de>
Date: Thu, 16 Apr 2020 02:44:04 +0200
Subject: [PATCH 3/3] vkd3d-shader: Always use private vars for arrayed
 builtins.

Fixes invalid shader code being generated in Monster Hunter World.

Signed-off-by: Philip Rebohle <philip.rebohle@tu-dortmund.de>
---
 libs/vkd3d-shader/spirv.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/libs/vkd3d-shader/spirv.c b/libs/vkd3d-shader/spirv.c
index e5caa48f..5a44d55d 100644
--- a/libs/vkd3d-shader/spirv.c
+++ b/libs/vkd3d-shader/spirv.c
@@ -4103,6 +4103,9 @@ static bool needs_private_io_variable(const struct vkd3d_shader_signature *signa
     bool have_sysval = false;
     unsigned int i, count;
 
+    if (builtin && builtin->spirv_array_size)
+        return true;
+
     if (*component_count == VKD3D_VEC4_SIZE)
         return false;
 
commit 7c6cf4a906c8751f96065e596867de0a7c8335ad
Author: Philip Rebohle <philip.rebohle@tu-dortmund.de>
Date:   Wed Apr 15 18:38:41 2020 +0200

    HACK MHW feature stuff

diff --git a/libs/vkd3d/device.c b/libs/vkd3d/device.c
index ba65b6c2..dab8d99d 100644
--- a/libs/vkd3d/device.c
+++ b/libs/vkd3d/device.c
@@ -3654,7 +3654,7 @@ static HRESULT STDMETHODCALLTYPE d3d12_device_SetResidencyPriority(d3d12_device_
     FIXME("iface %p, object_count %u, objects %p, priorities %p stub!\n",
             iface, object_count, objects, priorities);
 
-    return E_NOTIMPL;
+    return S_OK;
 }
 
 static void d3d12_init_pipeline_state_desc(struct d3d12_pipeline_state_desc *desc)
@@ -4198,7 +4198,7 @@ static void d3d12_device_caps_init_feature_options(struct d3d12_device *device)
     /* Currently not supported */
     options->MinPrecisionSupport = D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE;
     /* Currently not supported */
-    options->TiledResourcesTier = D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED;
+    options->TiledResourcesTier = D3D12_TILED_RESOURCES_TIER_2;
     options->ResourceBindingTier = d3d12_device_determine_resource_binding_tier(device);
     options->PSSpecifiedStencilRefSupported = vk_info->EXT_shader_stencil_export;
     options->TypedUAVLoadAdditionalFormats = features->shaderStorageImageExtendedFormats;
@@ -4354,6 +4354,7 @@ static void d3d12_device_caps_init_feature_level(struct d3d12_device *device)
             caps->options.ConservativeRasterizationTier >= D3D12_CONSERVATIVE_RASTERIZATION_TIER_1)
         caps->max_feature_level = D3D_FEATURE_LEVEL_12_1;
 
+    caps->max_feature_level = D3D_FEATURE_LEVEL_12_0;
     TRACE("Max feature level: %#x.\n", caps->max_feature_level);
 }
 

